"""Recreate database schema

Revision ID: bb9d733ba83f
Revises: 
Create Date: 2025-03-12 16:51:18.808570

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'bb9d733ba83f'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('student_answers')
    op.drop_table('assessments')
    op.drop_table('student_progress')
    op.drop_table('leaderboards')
    op.drop_table('ai_chat_interactions')
    op.drop_table('student_profiles')
    op.drop_table('courses')
    op.drop_table('ai_feedback')
    op.drop_table('users')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ai_feedback',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('student_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('question_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('feedback_text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('recommended_topics', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('generated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['student_id'], ['users.id'], name='ai_feedback_student_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='ai_feedback_pkey')
    )
    op.create_table('courses',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('tutor_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tutor_id'], ['users.id'], name='courses_tutor_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='courses_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('student_profiles',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('department', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('year_of_study', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('parent_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['users.id'], name='student_profiles_parent_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='student_profiles_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='student_profiles_pkey'),
    sa.UniqueConstraint('user_id', name='student_profiles_user_id_key')
    )
    op.create_table('ai_chat_interactions',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('student_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('query_text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('response_text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['student_id'], ['users.id'], name='ai_chat_interactions_student_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='ai_chat_interactions_pkey')
    )
    op.create_table('leaderboards',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('student_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('points', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('badges', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['student_id'], ['users.id'], name='leaderboards_student_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='leaderboards_pkey')
    )
    op.create_table('student_progress',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('student_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('completed_quizzes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('weak_areas_improved', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['student_id'], ['users.id'], name='student_progress_student_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='student_progress_pkey')
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('full_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('password_hash', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('role', postgresql.ENUM('student', 'tutor', 'parent', 'admin', name='user_roles'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('assessments',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('student_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('course_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('type', postgresql.ENUM('CAT', 'QUIZ', name='assessment_types'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], name='assessments_course_id_fkey'),
    sa.ForeignKeyConstraint(['student_id'], ['users.id'], name='assessments_student_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='assessments_pkey')
    )
    op.create_table('student_answers',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('student_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('question_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('selected_answer', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_correct', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('submitted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['student_id'], ['users.id'], name='student_answers_student_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='student_answers_pkey')
    )
    # ### end Alembic commands ###

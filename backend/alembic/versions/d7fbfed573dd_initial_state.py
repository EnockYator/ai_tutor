"""initial state

Revision ID: d7fbfed573dd
Revises: 7e722cda3541
Create Date: 2025-04-26 11:48:04.369346+00:00

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'd7fbfed573dd'
down_revision: Union[str, None] = '7e722cda3541'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('users')
    op.drop_table('student_answers')
    op.drop_table('assessments')
    op.drop_table('course_notes')
    op.drop_table('enrollments')
    op.drop_table('courses')
    op.drop_table('ai_practice_quizzes')
    op.drop_table('ai_feedback')
    op.drop_table('questions')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('questions',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('assessment_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('question_text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('choices', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('correct_answer', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['assessment_id'], ['assessments.id'], name='questions_assessment_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='questions_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('ai_feedback',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('student_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('question_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('feedback_text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('recommended_topics', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('generated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], name='ai_feedback_question_id_fkey'),
    sa.ForeignKeyConstraint(['student_id'], ['users.id'], name='ai_feedback_student_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='ai_feedback_pkey')
    )
    op.create_table('ai_practice_quizzes',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('student_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('generated_questions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['student_id'], ['users.id'], name='ai_practice_quizzes_student_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='ai_practice_quizzes_pkey')
    )
    op.create_table('courses',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('course_title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('course_code', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('course_tutor', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('tutor_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('enrolled', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tutor_id'], ['users.id'], name='courses_tutor_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='courses_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('enrollments',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('enrolled_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('course_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('student_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('enrolled', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], name='enrollments_course_id_fkey'),
    sa.ForeignKeyConstraint(['student_id'], ['users.id'], name='enrollments_student_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='enrollments_pkey')
    )
    op.create_table('course_notes',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('file_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('file_path', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('content_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('uploaded_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('course_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], name='course_notes_course_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='course_notes_pkey')
    )
    op.create_table('assessments',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('student_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('course_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('type', postgresql.ENUM('CAT', 'QUIZ', name='assessment_types'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], name='assessments_course_id_fkey'),
    sa.ForeignKeyConstraint(['student_id'], ['users.id'], name='assessments_student_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='assessments_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('student_answers',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('student_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('question_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('selected_answer', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_correct', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('submitted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], name='student_answers_question_id_fkey'),
    sa.ForeignKeyConstraint(['student_id'], ['users.id'], name='student_answers_student_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='student_answers_pkey')
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('full_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('password_hash', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('role', postgresql.ENUM('student', 'tutor', name='user_roles'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key')
    )
    # ### end Alembic commands ###

import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import axiosInstance from "./../../../axios";

const initialState = {
    generatedQuizzes: [],  // Quizzes generated by AI
    quizResults: [],       // Quiz results history
    currentQuiz: null,     // Currently taken quiz
    isLoading: false,
    error: null,
};

// Generate new quiz (student)
export const generateQuiz = createAsyncThunk(
    'quiz/generate',
    async (params, thunkAPI) => {
        try {
            const response = await axiosInstance.post('/quizzes/generate', params);
            return response.data;
        } catch (error) {
            return thunkAPI.rejectWithValue(
                error.response?.data?.message || "Failed to generate quiz"
            );
        }
    }
);

// Get quiz history (student)
export const getQuizHistory = createAsyncThunk(
    'quiz/history',
    async (_, thunkAPI) => {
        try {
            const response = await axiosInstance.get('/quizzes/history');
            return response.data;
        } catch (error) {
            return thunkAPI.rejectWithValue(
                error.response?.data?.message || "Failed to fetch quiz history"
            );
        }
    }
);

// Submit quiz answers (student)
export const submitQuiz = createAsyncThunk(
    'quiz/submit',
    async ({ quizId, answers }, thunkAPI) => {
        try {
            const response = await axiosInstance.post(`/quizzes/${quizId}/submit`, { answers });
            return response.data;
        } catch (error) {
            return thunkAPI.rejectWithValue(
                error.response?.data?.message || "Failed to submit quiz"
            );
        }
    }
);

const quizSlice = createSlice({
    name: 'quiz',
    initialState,
    reducers: {
        resetQuizState: () => initialState,
        setCurrentQuiz: (state, action) => {
            state.currentQuiz = action.payload;
        }
    },
    extraReducers: (builder) => {
        builder
            // Generate Quiz
            .addCase(generateQuiz.pending, (state) => {
                state.isLoading = true;
                state.error = null;
            })
            .addCase(generateQuiz.fulfilled, (state, action) => {
                state.isLoading = false;
                state.generatedQuizzes.push(action.payload.quiz);
                state.currentQuiz = action.payload.quiz;
            })
            .addCase(generateQuiz.rejected, (state, action) => {
                state.isLoading = false;
                state.error = action.payload;
            })
            
            // Get Quiz History
            .addCase(getQuizHistory.pending, (state) => {
                state.isLoading = true;
                state.error = null;
            })
            .addCase(getQuizHistory.fulfilled, (state, action) => {
                state.isLoading = false;
                state.quizResults = action.payload.quizzes;
            })
            .addCase(getQuizHistory.rejected, (state, action) => {
                state.isLoading = false;
                state.error = action.payload;
            })
            
            // Submit Quiz
            .addCase(submitQuiz.pending, (state) => {
                state.isLoading = true;
                state.error = null;
            })
            .addCase(submitQuiz.fulfilled, (state, action) => {
                state.isLoading = false;
                state.quizResults.push(action.payload.result);
                // Remove from generated quizzes if it exists there
                state.generatedQuizzes = state.generatedQuizzes.filter(
                    quiz => quiz.id !== action.payload.quizId
                );
            })
            .addCase(submitQuiz.rejected, (state, action) => {
                state.isLoading = false;
                state.error = action.payload;
            });
    }
});

export const { resetQuizState, setCurrentQuiz } = quizSlice.actions;
export default quizSlice.reducer;